import { Palette } from "palette.slint";

export enum EyeState {
    Default,
    Open,
    Closed,
    PartialClosed,
    EybrownUp
}

component Eybrown inherits Rectangle {
   in property <length> inner-height <=> inner.height;
   in property <length> inner-border-radius <=> inner.border-radius;

   clip: true;

    inner := Rectangle {
        y: 20px;
        border-width: 5px;
        border-color: black;
        border-radius: root.inner-height / 2;
    }
}

export component Eye {
    private property <length> inner-height: root.height / 2;
    private property <duration> animation-duration: 300ms;

    width: 160px;
    height: root.width;

    in property <EyeState> state;

    eybrown := Eybrown {
        y: 0;
        height: root.height / 4;
        inner-height: root.height / 2;
        inner-border-radius: root.height / 2;

        animate y {
            duration: root.animation-duration;
       }
    }

    if root.state == EyeState.Closed : Rectangle {
        width: parent.width;
        height: 2px;
        background: black;
    }


    Rectangle {
        height: root.inner-height;
        background: white;
        border-radius: root.height / 2;
        clip: true;

        Rectangle {
            width: root.width / 2.5;
            height: root.height / 2.5;
            border-radius: max(self.width, self.height) / 2;
            border-width: 1px;
            border-color: Palette.slint.darker(2.0);
            background: Palette.slint;

            Rectangle {
                width: parent.width / 2;
                height: parent.height / 2;
                border-radius: max(self.width, self.height) / 2;
                background: black;
            }
        }
    }

    states [
        closed when root.state == EyeState.Closed : {
            root.inner-height: 0px;
        }
        open when root.state == EyeState.Open : {
            root.inner-height: root.height / 1.3;
        }
        eybrown when root.state == EyeState.EybrownUp : {
            root.inner-height: root.height / 1.8;
            eybrown.y: -20px;
        }
        partial-closed when root.state == EyeState.PartialClosed : {
            root.inner-height: root.height / 2.8;
            eybrown.y: 8px;
        }
    ]

    animate inner-height {
         duration: root.animation-duration;
    }
}